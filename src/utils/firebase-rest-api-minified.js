(function(){console.log("üîß Setting up Firebase REST API client...");const e="blindtab-db",t="AIzaSyDummyKeyForSecurity";window.firestoreREST={baseUrl:`https://firestore.googleapis.com/v1/projects/${e}/databases/(default)/documents`,async get(e,r){console.log(`üîç Getting document: ${e}/${r}`);try{const n=await fetch(`${this.baseUrl}/${e}/${r}?key=${t}`);if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const s=await n.json();return this._transformResponse(s)}catch(e){throw console.error("‚ùå Error getting document:",e),e}},async list(e,r=100){console.log(`üìã Listing documents in: ${e}`);try{const n=await fetch(`${this.baseUrl}/${e}?pageSize=${r}&key=${t}`);if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const s=await n.json();return{docs:s.documents?s.documents.map(e=>this._transformResponse(e)):[]}}catch(e){throw console.error("‚ùå Error listing documents:",e),e}},async set(e,r,n){console.log(`üíæ Setting document: ${e}/${r}`);try{const s=await fetch(`${this.baseUrl}/${e}/${r}?key=${t}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({fields:this._transformRequest(n)})});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const o=await s.json();return this._transformResponse(o)}catch(e){throw console.error("‚ùå Error setting document:",e),e}},async delete(e,r){console.log(`üóëÔ∏è Deleting document: ${e}/${r}`);try{const n=await fetch(`${this.baseUrl}/${e}/${r}?key=${t}`,{method:"DELETE"});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return!0}catch(e){throw console.error("‚ùå Error deleting document:",e),e}},_transformResponse(e){if(!e.fields)return null;const t={};for(const[r,n]of Object.entries(e.fields))t[r]=this._extractValue(n);if(e.name){const r=e.name.split("/");t.id=r[r.length-1]}return t},_extractValue(e){const t=Object.keys(e)[0],r=e[t];switch(t){case"stringValue":case"integerValue":case"doubleValue":case"booleanValue":return r;case"nullValue":return null;case"mapValue":return this._transformResponse(r);case"arrayValue":return r.values?r.values.map(e=>this._extractValue(e)):[];case"timestampValue":return new Date(r);default:return console.warn("‚ö†Ô∏è Unknown field type:",t),r}},_transformRequest(e){const t={};for(const[r,n]of Object.entries(e))"id"!==r&&(t[r]=this._createFieldValue(n));return t},_createFieldValue(e){if(null==e)return{nullValue:null};switch(typeof e){case"string":return{stringValue:e};case"number":return Number.isInteger(e)?{integerValue:e.toString()}:{doubleValue:e};case"boolean":return{booleanValue:e};case"object":return Array.isArray(e)?{arrayValue:{values:e.map(e=>this._createFieldValue(e))}}:e instanceof Date?{timestampValue:e.toISOString()}:{mapValue:{fields:this._transformRequest(e)}};default:return console.warn("‚ö†Ô∏è Unsupported value type:",typeof e),{stringValue:String(e)}}}};async function r(){try{console.log("üß™ Testing REST client...");const e="firebase_test",t="rest_test_"+Date.now(),r={message:"Hello from REST API",timestamp:new Date,number:42,nested:{field:"nested value"},array:[1,2,"three"]};await firestoreREST.set(e,t,r),console.log("‚úÖ Document created successfully");const n=await firestoreREST.get(e,t);console.log("‚úÖ Document retrieved successfully:",n),await firestoreREST.delete(e,t),console.log("‚úÖ Document deleted successfully"),console.log("üéâ REST client is working! You can now use window.firestoreREST to interact with Firestore.")}catch(e){console.error("‚ùå REST client test failed:",e)}}r(),console.log("‚úÖ Firebase REST API client is ready to use!"),console.log("üìù Usage examples:"),console.log("  - Get document: firestoreREST.get(\"collection\", \"docId\")"),console.log("  - List documents: firestoreREST.list(\"collection\")"),console.log("  - Set document: firestoreREST.set(\"collection\", \"docId\", { field: \"value\" })"),console.log("  - Delete document: firestoreREST.delete(\"collection\", \"docId\")")})(); 